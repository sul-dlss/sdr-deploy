#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift 'lib'

require 'sdr_deploy'

# CLI for deployment
class Deploy < Thor
  default_task :deploy

  option :only,
         type: :array,
         default: [],
         desc: 'Update only these repos'

  option :except,
         type: :array,
         default: [],
         desc: 'Update all except these repos'

  option :cocina,
         type: :boolean,
         default: false,
         desc: 'Only update repos affected by new cocina-models gem release',
         aliases: '-c'

  option :skip_update,
         type: :boolean,
         default: false,
         desc: 'Skip update repos',
         aliases: '-s'

  option :environment,
         required: true,
         enum: Settings.supported_envs,
         banner: 'ENVIRONMENT',
         desc: "Environment (#{Settings.supported_envs})",
         aliases: '-e'

  desc 'deploy', 'deploy all the services in an environment'
  def deploy
    raise Thor::Error, 'Use only one of --only or --except' if options[:only].any? && options[:except].any?

    RepoUpdater.update(repos: repositories, prune: prune?) unless options[:skip_update]
    abort 'ABORTING: multiple versions of the cocina-models gem are in use' unless CocinaChecker.check

    Deployer.deploy(environment: options[:environment], repos: repositories)
  end

  def self.exit_on_failure?
    true
  end

  private

  # Do not prune repos if operating on a subset of repos else legitimate current repos get unnecessarily pruned
  def prune?
    options.slice(:only, :except, :cocina).none?
  end

  def repositories
    repos =
      if options[:cocina]
        Settings.repositories.select(&:cocina_models_update)
      else
        Settings.repositories
      end

    if options[:only].any?
      repos.select { |repo| options[:only].include?(repo.name) }
    elsif options[:except].any?
      repos.reject { |repo| options[:except].include?(repo.name) }
    else
      repos
    end
  end
end

def warning
  puts '*************************'
  puts 'WARNINGS! (added jan 2022)'
  puts '1. You must remember to deploy dor-service-app using Ruby 2.7'
  puts '2. You must deploy Argo to qa/stage using `cap deploy` from your cloned argo repo'
  puts "(Argo is commented out in config/settings.yml since we don't want to"
  puts 'automatically deploy Argo to production during the Fedora removal workcycle!'
  puts 'Add back in when workcycle is complete.)'
  puts '*************************'
end

warning
Deploy.start(ARGV)
warning
