#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift 'lib'

require 'sdr_deploy'

# SDR CLI
class CLI < Thor
  def self.exit_on_failure?
    true
  end

  option :skip_update,
         type: :boolean,
         default: false,
         desc: 'Skip update repos',
         aliases: '-s'
  option :tag,
         type: :string,
         desc: 'Check cocina version in the given tag or branch instead of the default branch',
         aliases: ['-t', '--branch']
  desc 'check_cocina', 'check for cocina-models version mismatches'
  def check_cocina
    repositories = Settings.repositories.select(&:cocina_models_update)
    RepoUpdater.update(repos: repositories) unless options[:skip_update]
    CocinaChecker.check(repos: repositories, tag: options[:tag])
  end

  option :message,
         required: false,
         banner: 'TAG_MESSAGE',
         desc: 'Message to describe a newly created tag',
         aliases: '-m'
  option :delete,
         required: false,
         type: :boolean,
         default: false,
         banner: 'DELETE',
         desc: 'Delete the tag locally and remotely',
         aliases: '-d'
  option :verify,
         required: false,
         type: :boolean,
         default: false,
         banner: 'VERIFY',
         desc: 'Verify the tag remotely',
         aliases: '-v'
  option :cocina,
         type: :boolean,
         default: false,
         desc: 'Only tag repos affected by new cocina-models gem release',
         aliases: '-c'
  desc 'tag TAG_NAME', 'create or delete a tag named TAG_NAME'
  def tag(tag_name)
    repositories = if options[:cocina]
                     Settings.repositories.select(&:cocina_models_update)
                   else
                     Settings.repositories
                   end

    RepoUpdater.update(repos: repositories)
    if options[:delete]
      Tagger.delete(tag_name:, repos: repositories)
    elsif options[:verify]
      Tagger.verify(tag_name:, repos: repositories)
    else
      Tagger.create(tag_name:, tag_message: options.fetch(:message, 'created by sdr-deploy'), repos: repositories)
    end
  end

  option :only,
         type: :array,
         default: [],
         desc: 'Update only these repos'
  option :except,
         type: :array,
         default: [],
         desc: 'Update all except these repos'
  option :skip_update,
         type: :boolean,
         default: false,
         desc: 'Skip update repos',
         aliases: '-s'
  option :environment,
         required: true,
         enum: ::Settings.supported_envs.keys.map(&:to_s),
         banner: 'ENVIRONMENT',
         desc: "Environment (#{Settings.supported_envs.keys.map(&:to_s)})",
         aliases: '-e'
  desc 'check_ssh', 'check SSH connections'
  def check_ssh
    raise Thor::Error, 'Use only one of --only or --except' if options[:only].any? && options[:except].any?

    repositories = if options[:only].any?
                     Settings.repositories.select { |repo| options[:only].include?(repo.name) }
                   elsif options[:except].any?
                     Settings.repositories.reject { |repo| options[:except].include?(repo.name) }
                   else
                     Settings.repositories
                   end

    # Do not prune repos if operating on a subset of repos else legitimate current repos get unnecessarily pruned
    RepoUpdater.update(repos: repositories, prune: options.slice(:only, :except).none?) unless options[:skip_update]
    SshChecker.check(environment: options[:environment], repos: repositories)
  end

  option :only,
         type: :array,
         default: [],
         desc: 'Update only these repos'
  option :except,
         type: :array,
         default: [],
         desc: 'Update all except these repos'
  option :cocina,
         type: :boolean,
         default: false,
         desc: 'Only update repos affected by new cocina-models gem release',
         aliases: '-c'
  option :before_command,
         type: :string,
         desc: 'Run this command on each host before deploying',
         aliases: '-b'
  option :tag,
         type: :string,
         desc: 'Deploy the given tag or branch instead of the default branch',
         aliases: ['-t', '--branch']
  option :skip_update,
         type: :boolean,
         default: false,
         desc: 'Skip update repos',
         aliases: '-s'
  option :environment,
         required: true,
         enum: Settings.supported_envs.keys.map(&:to_s),
         banner: 'ENVIRONMENT',
         desc: 'Deployment environment',
         aliases: '-e'
  desc 'deploy', 'deploy all the services in an environment'
  def deploy
    raise Thor::Error, 'Use only one of --only or --except' if options[:only].any? && options[:except].any?

    repositories = if options[:cocina]
                     Settings.repositories.select(&:cocina_models_update)
                   else
                     Settings.repositories
                   end

    if options[:only].any?
      repositories.select! { |repo| options[:only].include?(repo.name) }
    elsif options[:except].any?
      repositories.reject! { |repo| options[:except].include?(repo.name) }
    end

    repositories.reject! { |repo| Array(repo.skip_envs).include?(options[:environment]) }

    # Do not prune repos if operating on a subset of repos else legitimate current repos get unnecessarily pruned
    RepoUpdater.update(repos: repositories, prune: options.slice(:only, :except, :cocina, :skip_envs).none?) unless options[:skip_update]
    cocina_repos = Settings.repositories.select(&:cocina_models_update)
    abort 'ABORTING: due to cocina-models version divergence' unless CocinaChecker.check(repos: cocina_repos, tag: options[:tag])

    Deployer.deploy(
      environment: options[:environment],
      repos: repositories,
      tag: options[:tag],
      before_command: options[:before_command]
    )
  end

  option :only,
         type: :array,
         default: [],
         desc: 'Update only these repos'
  option :except,
         type: :array,
         default: [],
         desc: 'Update all except these repos'
  desc 'refresh_repos', 'refresh the local repos'
  def refresh_repos
    RepoUpdater.update(repos: Settings.repositories, prune: options.slice(:only, :except).none?)
  end
end

CLI.start(ARGV)
